' Program: Generate charts from a CSV of data that gets generated by Insight
'   The program should have minimal input and result in something that lets the user print off the charts

' Libraries Used: mscorlib.tlb ---> For the ArrayList
' ArrayList methods: https://excelmacromastery.com/vba-arraylist/

Option Explicit

' Function: Controls logic for the program
Public Sub Main()

    ClearImmediateWindow
    Debug.Print "Starting macro..."
    Dim startTime As Double, totalTime As Double
    startTime = Timer

    'We'll Read data raw data from COPY&PASTE and read what the user wants from MacroSheet
    Dim cpSheet As Worksheet, macroSheet As Worksheet
    Set cpSheet = ThisWorkbook.Sheets("COPY&PASTE")
    Set macroSheet = ThisWorkbook.ActiveSheet 'Go by active sheet in case they want to have multiple macro sheets

    ' Create a new worksheet to create the charts
    Dim outputSheet As Worksheet
    Set outputSheet = MakeChartSheet(macroSheet)
    
    ' Read each row of data into an ArrayList
    ' The csvData is an ArrayList holding each of those row ArrayLists
    Dim csvData As New ArrayList
    ' The headerNames is an ArrayList that just holds the name of the point at any give position
    Dim headerNames As New ArrayList
    Set csvData = ReadData(cpSheet, headerNames)
    
    ' Read formatting data into an ArrayList
    ' formatData is an ArrayList that has an ArrayList for each point's chart formatting
    Dim FormatData As New ArrayList
    Set FormatData = ReadFormatting(macroSheet)
    
    ' Finally, create the charts in the output sheet
    CreateCharts csvData, FormatData, outputSheet, headerNames
    
    totalTime = Timer - startTime
    Debug.Print "Done! Time in seconds = " & CStr(totalTime)
     
End Sub

' Function: Since there is no built in way to clear ouput in the immediate window
'   printing some new lines will psuedo clear it
Private Sub ClearImmediateWindow()

    Dim i As Long
    For i = 0 To 100
        Debug.Print ("")
    Next i
    
End Sub


' Function: Create the charts for each point and format specified and format the output sheet
' tableData: holds an ArrayList for each row in the raw table data
' formatData: holds an ArrayList for each row that represents how a point's chart should look
' outputSheet: Sheet that the charts will be placed on
' headerNames: holds the header names for the CSV data at each index
Private Sub CreateCharts(tableData As ArrayList, FormatData As ArrayList, outputSheet As Worksheet, headerNames As ArrayList)

    Dim i As Long
    Dim j As Long
    Dim formatIndex As Long
    
    ' Make all rows and columns 100 pixels wide/tall to make placing charts easier
    outputSheet.Columns.ColumnWidth = 10.33
    outputSheet.Rows.RowHeight = 60
    
    'Add a vertical page break so the user doesn't need to select autofit to columns
    outputSheet.VPageBreaks.Add Columns(13)

    ' Convert data to arrays since chart series can be created with arrays
    Dim dates As Variant
    dates = tableData.Item(0).ToArray
    
    ' This will be used to space out charts as we add them to the sheet
    Dim chartSpacing As Long
    chartSpacing = 0
    ' Page breaks will be put on a row after every 2 charts
    Dim pageBreakRow As Long
    pageBreakRow = 0
    
    ' Search the table for the point data
    For formatIndex = 0 To FormatData.count - 1
    
        ' Check if the user wants to create this chart
        Dim doChart As Boolean
        doChart = False
        For i = 2 To tableData.count - 1
            If Replace(FormatData(formatIndex).PointToUse, ":", "") = CStr(headerNames(i)) Then
                doChart = True
                Exit For
            End If
        Next i
        
        ' The user wants this chart, so create it
        If doChart = True Then
        
            ' Get the data for this chart
            Dim pointData As Variant
            pointData = tableData(i).ToArray
            
            ' If there are some data points in the middle of the dataset that are rough,
            '   then they'll be graphed as 0 by default. This creates some crazy graphs
            Dim k As Long
            For k = 0 To UBound(pointData)
                If IsNumeric(pointData(k)) = False Then
                    pointData(k) = Empty
                End If
            Next k
            
            ' Create the new chart
            Dim newChart As ChartObject
            Set newChart = outputSheet.ChartObjects.Add( _
                Left:=60, _
                Width:=600, _
                Top:=60 + chartSpacing, _
                Height:=300)
            
            ' Move each chart down 3 rows
            chartSpacing = chartSpacing + 480
            
            ' Add page breaks after every 2 charts
            If i >= 4 And i Mod 2 = 0 Then
                pageBreakRow = pageBreakRow + 16
                outputSheet.HPageBreaks.Add Rows(pageBreakRow)
            End If
            
            ' Chart formatting
            With newChart.Chart
                .ChartType = xlLine                                         ' Make it a line chart
                .HasTitle = True                                            ' Add title
                .ChartTitle.Text = FormatData(formatIndex).ChartTitle             ' Change title
                .Axes(xlCategory).HasMajorGridlines = True                  ' Add veritcal gridlines
                .Axes(xlValue).HasMajorGridlines = False                    ' Remove horizontal gridlines
                .Axes(xlCategory).TickMarkSpacing = 24                      ' Make the spacing for major gridlines represent a day
                .Axes(xlCategory, xlPrimary).TickLabelSpacing = 24          ' Make it 1 label per day, may change this to be every other day or week '168 = week
                .Legend.Position = xlLegendPositionBottom                   ' Move legend to bottom
                .Axes(xlValue).HasTitle = True                              ' Add y axis
                .Axes(xlValue).AxisTitle.Text = FormatData(formatIndex).YAxisTitle ' Add y axis title
                If FormatData(formatIndex).YAxisTitle <> "" Then
                    .Axes(xlValue, xlPrimary).AxisTitle.Font.Size = 12
                End If
                .Axes(xlCategory).TickLabels.Orientation = xlUpward         '---\ These two lines make it so the date labels are
                .Axes(xlCategory).TickLabelPosition = xlLow                 '---/ always below the plot, even with negative y values
                
                ' We can only add a subtitle if the title exists
                '   And we only want to make a subtitle if one is specified
                If FormatData(formatIndex).SubTitle <> "" And FormatData(formatIndex).ChartTitle <> "" Then
                'If FormatData(i - 2).SubTitle <> "" And FormatData(i - 2).ChartTitle <> "" Then
                    ' add a textbox below the chart title to act as a subtitle
                    With .Shapes.AddTextbox(msoTextOrientationHorizontal, .ChartTitle.Left, .ChartTitle.Top + _
                    .ChartTitle.Height, .ChartTitle.Width, .ChartTitle.Height)
                    
                        '.TextFrame2.TextRange.Characters.Text = FormatData(i - 2).SubTitle
                        .TextFrame2.TextRange.Characters.Text = FormatData(formatIndex).SubTitle
                        .TextFrame2.TextRange.Font.Size = 12 '
                        .TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignCenter ' Center alignment
                    End With
                    
                    ' Make the plot area shorter to accomodate a subtitle
                    .PlotArea.Height = .PlotArea.Height * 0.9
                    .PlotArea.Top = .PlotArea.Top + 20
                End If
                
            End With
            
            ' Add the Low, High, and Average (If They exist)
            Dim LowLimit As Variant, HighLimit As Variant, Average As Variant, constantValue
            LowLimit = FormatData(formatIndex).LowLimit
            HighLimit = FormatData(formatIndex).HighLimit
            Average = FormatData(formatIndex).Average
            constantValue = FormatData(formatIndex).OtherConstantValue
            
            If LowLimit <> "" Then
                ' Create new array where all values are the low value
                Dim lowValues() As Double
                ReDim lowValues(0 To UBound(dates))
                For j = 0 To UBound(dates)
                    lowValues(j) = CDbl(LowLimit)
                Next j
                ' Add the series to the chart
                With newChart.Chart.SeriesCollection.NewSeries
                    .XValues = dates
                    .Values = lowValues
                    .Name = "Low Limit"
                    ' Give the user the specified line color if possible
                    If GetColorFromString(FormatData(formatIndex).LowLineColor) = -1 Then
                        .Format.Line.ForeColor.RGB = GetColorFromString("blue")
                    Else
                        .Format.Line.ForeColor.RGB = GetColorFromString(FormatData(formatIndex).LowLineColor)
                    End If
                    
                End With
            End If
            
            If HighLimit <> "" Then
                ' Create new array where all values are the high value
                Dim highValues() As Double
                ReDim highValues(0 To UBound(dates))
                For j = 0 To UBound(dates)
                    highValues(j) = CDbl(HighLimit)
                Next j
                
                ' Add the series to the chart
                With newChart.Chart.SeriesCollection.NewSeries
                    .XValues = dates
                    .Values = highValues
                    .Name = "High Limit"
                    ' Give the user the specified line color if possible
                    If GetColorFromString(FormatData(formatIndex).HighLineColor) = -1 Then
                        .Format.Line.ForeColor.RGB = GetColorFromString("red")
                    Else
                        .Format.Line.ForeColor.RGB = GetColorFromString(FormatData(formatIndex).HighLineColor)
                    End If
                End With
            End If
            
            If constantValue <> "" Then
                ' Create new array where all values are the defined value
                Dim constantValues() As Double
                ReDim constantValues(0 To UBound(dates))
                For j = 0 To UBound(dates)
                    constantValues(j) = CDbl(constantValue)
                Next j
                
                ' Add the series to the chart
                With newChart.Chart.SeriesCollection.NewSeries
                    .XValues = dates
                    .Values = constantValues
                    .Name = FormatData(formatIndex).OtherConstantName
                    ' Give the user the specified line color if possible
                    If GetColorFromString(FormatData(formatIndex).OtherConstantLineColor) = -1 Then
                        .Format.Line.ForeColor.RGB = GetColorFromString("pink")
                    Else
                        .Format.Line.ForeColor.RGB = GetColorFromString(FormatData(formatIndex).OtherConstantLineColor)
                    End If
                End With
            End If
            
            If Average <> "" And Average <> "N" And Average <> "n" Then
            
                ' Calculate the average value
                Dim averageValue As Double
                averageValue = 0
                Dim count As Long
                count = 0
                For j = 0 To UBound(dates)
                    ' Sum the values
                    If IsNumeric(pointData(j)) = True And pointData(j) <> Empty Then
                        averageValue = averageValue + pointData(j)
                        count = count + 1
                    End If
                Next j
                ' Divide by the numer of items (avoid div by 0 for no valid data points)
                If count > 0 Then
                    averageValue = averageValue / count
                End If
                
                ' Create an array where every item the average value
                Dim averageArray() As Double
                ReDim averageArray(0 To UBound(dates))
                For j = 0 To UBound(dates)
                    averageArray(j) = CDbl(averageValue)
                Next j
                
                ' Add an average series to the chart
                With newChart.Chart.SeriesCollection.NewSeries
                    .XValues = dates
                    .Values = averageArray
                    .Name = "Average"
                    ' Give the user the specified line color if possible
                    If GetColorFromString(FormatData(formatIndex).AverageLineColor) = -1 Then
                        .Format.Line.ForeColor.RGB = GetColorFromString("yellow")
                    Else
                        .Format.Line.ForeColor.RGB = GetColorFromString(FormatData(formatIndex).AverageLineColor)
                    End If
                End With
                
            End If
            
            ' Add the point data to the chart last so the point data will plot over
            '   the constant vales
            With newChart.Chart.SeriesCollection.NewSeries
                .XValues = dates
                .Values = pointData
                .Name = FormatData(formatIndex).LineLegendName
                .Format.Line.ForeColor.RGB = RGB(0, 150, 0)
                ' Give the user the specified line color if possible
                If GetColorFromString(FormatData(formatIndex).PointLineColor) = -1 Then
                    .Format.Line.ForeColor.RGB = GetColorFromString("green")
                Else
                    .Format.Line.ForeColor.RGB = GetColorFromString(FormatData(formatIndex).PointLineColor)
                End If
            End With
            
            ' Auto scale y values once all the data gets added
            newChart.Chart.Axes(xlValue).MinimumScaleIsAuto = True
            newChart.Chart.Axes(xlValue).MaximumScaleIsAuto = True
            ' Force the min Y value if the user specified one
            If FormatData(formatIndex).MinYValue <> "" Then
                newChart.Chart.Axes(xlValue).MinimumScale = CDbl(FormatData(formatIndex).MinYValue)
            End If
            ' Force the max Y value if the user specified one
            If FormatData(formatIndex).MaxYValue <> "" Then
                newChart.Chart.Axes(xlValue).MaximumScale = CDbl(FormatData(formatIndex).MaxYValue)
            End If
        
        End If ' End of if statement that says user wants this chart
        
    Next formatIndex ' Move to next format data
    
    ' Prevent Excel from auto adding page breaks on top of the ones we put in
    outputSheet.PageSetup.Zoom = False
    outputSheet.PageSetup.FitToPagesWide = 1
    outputSheet.PageSetup.FitToPagesTall = False

End Sub

' Function: Determine the line color for lines from the name of the
'   color that the user wants.
' colorName: Name of a color taken from excel
' Returns: the color specified by the string. -1 indicates
'   that the color the user entered does not match any of our valid colors
Private Function GetColorFromString(colorName As String) As Long

    ' All of the valid colors
    Dim green As Long, red As Long, blue As Long, yellow As Long, _
        orange As Long, pink As Long, purple As Long, black As Long
        
    green = RGB(49, 168, 25)
    red = RGB(220, 0, 0)
    blue = RGB(0, 0, 220)
    yellow = RGB(253, 218, 13)
    orange = RGB(252, 167, 8)
    pink = RGB(255, 0, 255)
    purple = RGB(133, 23, 230)
    black = RGB(0, 0, 0)
    
    ' Make the user input more consistant
    colorName = UCase(colorName)
    colorName = Trim(colorName)
    
    If colorName = "GREEN" Then
        GetColorFromString = green
    ElseIf colorName = "RED" Then
        GetColorFromString = red
    ElseIf colorName = "BLUE" Then
        GetColorFromString = blue
    ElseIf colorName = "YELLOW" Then
        GetColorFromString = yellow
    ElseIf colorName = "ORANGE" Then
        GetColorFromString = orange
    ElseIf colorName = "PINK" Then
        GetColorFromString = pink
    ElseIf colorName = "PURPLE" Then
        GetColorFromString = purple
    ElseIf colorName = "BLACK" Then
        GetColorFromString = black
    Else
        GetColorFromString = -1
    End If
    
End Function

' Function: Make a new output sheet. The sheet is copied from the macro sheet to get the image in the header
' macroSheet: Sheet with the button. We want to place the new sheet right after it
' Returns: The worksheet to put charts into
Private Function MakeChartSheet(macroSheet As Worksheet) As Worksheet

    Dim outputSheet As Worksheet
    Dim outputName As String
    
    ' If the user does not specify a name, our generic name will be output
    outputName = "Output"
    If macroSheet.Cells(1, 2) <> "" Then
        outputName = CStr(macroSheet.Cells(1, 2))
    End If
    
    ' Make sure the name is not already taken
    Dim isNameUnique As Boolean
    isNameUnique = True
    Dim nameSuffix As Long
    nameSuffix = 0
    
    Dim break As Boolean
    break = False
    While break = False
        ' Check if this name is in there
        Dim ws As Worksheet
        isNameUnique = True
        For Each ws In ThisWorkbook.Sheets
            If ws.Name = outputName Then
                isNameUnique = False
            End If
        Next ws
        
        ' Change the name if it's not unique
        If isNameUnique = False Then
            nameSuffix = nameSuffix + 1
            outputName = outputName & " " & CStr(nameSuffix)
        Else
            break = True
        End If
    Wend
    
    ' Copy from the macro sheet that has the correct custom header
    macroSheet.Copy After:=macroSheet
    ' The new sheet becomes the active sheet
    Set outputSheet = ThisWorkbook.ActiveSheet
    outputSheet.Name = outputName
    
    ' Clear all the cells, charts, buttons, etc.
    outputSheet.Cells.Clear
    Dim sheetSheet As shape
    Dim i As Long
    For i = 1 To outputSheet.Shapes.count
        outputSheet.Shapes(i).Delete
    Next i
    
    ' Make the tab for output sheets blue
    outputSheet.Tab.Color = RGB(0, 0, 230)
    
    ' Return the sheet
    Set MakeChartSheet = outputSheet

End Function

' Function: Read the table data into an ArrayList where each item in the
'   ArrayList is an ArrayList for each column. Date, Time, and each point will
'   get their own ArrayList
' dataSheet: WorkSheet where they copy and paste the data (COPY&PASTE)
' Returns: ArrayList holding each table column in an arrayList
Private Function ReadData(dataSheet As Worksheet, ByRef headerNames As ArrayList) As ArrayList

    ' This list will hold data for each column
    ' Date, Time, Point_1, Point_2, ...
    Dim tableData As New ArrayList
    
    ' First, find where the table starts and ends
    Dim topRow As Long, bottomRow As Long, rightCol As Long
    
    Dim i As Long
    i = 1
    Dim break As Boolean
    break = False
    
    ' Find the start and end row of the table
    While break = False

        If dataSheet.Cells(i, 1).Value = "<>Date" Then
            topRow = i + 1 ' Don't include the header row
        End If
        
        If InStr(dataSheet.Cells(i, 1).Value, "End of Report") <> 0 Then
            bottomRow = i - 1 ' Don't include the End of Report row
            break = True
        End If
        
        i = i + 1
    Wend
    
    ' Find the ending column of the table
    i = 1
    break = False
    While break = False
    
        If dataSheet.Cells(topRow, i).Value = "" Then
            rightCol = i - 1
            break = True
        End If
        i = i + 1
    Wend
    
    'Read time and each point into its own ArrayList
    Dim j As Long
    For i = 1 To rightCol
    
        ' Add the headers to a list so we can compare point names to the list of charts the user wants
        headerNames.Add ((dataSheet.Cells(topRow - 1, i).Value))
    
        ' For this date, time, or point
        Dim pointData As ArrayList
        Set pointData = New ArrayList
        ' NOTE: Dim pointData As New ArrayList will treat the object like it is static
        
        For j = topRow To bottomRow
            pointData.Add (dataSheet.Cells(j, i).Value)
        Next j
        
        ' Add thsi column's data to the table data
        tableData.Add pointData
    Next i
    
    ' Return the table
    Set ReadData = tableData

End Function

' Function: Read formatting details from the MacroSheet sheet. These will determine
'   what points get charts and how the charts are formatted (title, x-axis labels, etc.)
' formatSheet: sheet with the macro button and formatting details. The data is grouped
'   with the FormatData class.
Private Function ReadFormatting(formatSheet As Worksheet) As ArrayList

    ' Start on the first row that's going to have data
    Dim startRow As Long
    startRow = 6
    
    ' Each row will contain an ArrayList with formatting for each point
    ' Each value in FormatData will be a FormatData object that represents a single row
    Dim FormatData As New ArrayList
    
    ' Read the formatting data
    Dim break As Boolean
    break = False
    Dim i As Long
    i = startRow
    Dim j As Long
    While break = False
    
        If formatSheet.Cells(i, 1) = "" Then
            break = True
        Else
            ' Create a new object to represent this row
            Dim newRow As FormatData
            Set newRow = New FormatData
            
            newRow.PointToUse = formatSheet.Cells(i, 1)
            newRow.ChartTitle = formatSheet.Cells(i, 2)
            newRow.SubTitle = formatSheet.Cells(i, 3)
            newRow.LineLegendName = formatSheet.Cells(i, 4)
            newRow.YAxisTitle = formatSheet.Cells(i, 5)
            newRow.MinYValue = formatSheet.Cells(i, 6)
            newRow.MaxYValue = formatSheet.Cells(i, 7)
            newRow.LowLimit = formatSheet.Cells(i, 8)
            newRow.HighLimit = formatSheet.Cells(i, 9)
            newRow.Average = formatSheet.Cells(i, 10)
            newRow.OtherConstantValue = formatSheet.Cells(i, 11)
            newRow.OtherConstantName = formatSheet.Cells(i, 12)
            newRow.PointLineColor = formatSheet.Cells(i, 13)
            newRow.LowLineColor = formatSheet.Cells(i, 14)
            newRow.HighLineColor = formatSheet.Cells(i, 15)
            newRow.AverageLineColor = formatSheet.Cells(i, 16)
            newRow.OtherConstantLineColor = formatSheet.Cells(i, 17)
            
            FormatData.Add newRow
        End If
        i = i + 1
    Wend

    Set ReadFormatting = FormatData

End Function
